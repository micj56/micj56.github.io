Uebungen
========

1. Betrachten Sie die Grammatik
   S -> (L)|a
   L -> L,S|S
   a) Was sind die Terminale, Nichtterminale und das Startsymbol?
   b) Finden Sie Parsebaeume fuer die folgenden Saetze:
      (a,a)
      (a,(a,a))
      (a,((a,a),(a,a)))
   c) Kostruieren Sie eine Linksableitung fuer jeden Satz aus b).
   d) Kostruieren Sie eine Rechtsableitung fuer jeden Satz aus b).
   e) Welche Sprache generiert diese Grammatik?

2. Betrachten Sie die Grammatik
   S -> aSbS|bSaS|<epsilon>
   a) Zeigen Sie durch Konstruktion zweier verschiedener
      Linksableitungen fuer den Satz abab, dass die Grammatik
      mehrdeutig ist.
   b) Zeigen Sie durch Konstruktion zweier verschiedener
      Rechtsableitungen fuer den Satz abab, dass die Grammatik
      mehrdeutig ist.
   c) Konstruieren Sie die entsprechenden Parsebaeume fuer die
      Ableitungen aus a) und b).

3. Uebersetzen Sie den folgenden regulaeren Ausdruck in eine
   kontextfreie Grammatik:
   ((xy*x)|(yx*y))?

4. Diese und die folgende Aufgabe beschaeftigt sich noch einmal mit
   den SLPL-Programmen aus der ersten Uebung.
   a) Schreiben Sie eine (moeglicherweise mehrdeutige) Grammatik zur
      Beschreibung von SLPL-Programmen. Gehen Sie genau nach dem im
      Aufgabentext angegebenen Aufbau der Sprache vor.
   b) Machen Sie die Grammatik eindeutig. Beruecksichtigen Sie
      die ueblichen Regeln zum Vorrang und zur Assoziativitaet.

5. a) Wandeln Sie die Grammatik aus 4b) in eine LL(1)-Grammatik um.
   b) Geben Sie das Geruest fuer einen Top-Down-Parser nach dem
      Prinzip "rekursiver Abstieg" an!
   c) Wir hatten in der ersten Uebung das zu interpretierende Programm
      in Form eines Baumes vorgegeben. Wie ist der Top-Down-Parser zu
      ergaenzen, um beim Parsen einen solchen Programmbaum als Abbild
      des gelesenen Quelltextes zu erzeugen?


Programmieraufgabe
==================

Problemstellung
---------------

Konstruktion des Parsers fuer den SPL-Compiler.


Vorgegebene Dateien
-------------------

README            -  die Beschreibung, die Sie gerade lesen
Makefile          -  ein Makefile zur automatischen Uebersetzung
spl               -  ein Skript zum Aufruf des SPL-Compilers
lib/*.jar         -  der Parsergenerator und die Laufzeitunterstuetzung
main/Main.java    -  das Hauptprogramm des SPL-Compilers
parse/parser.cup  -  die Parser-Spezifikation: das ist Ihre Aufgabe


Aufgaben
--------

1. Der SPL-Scanner soll mit dem SPL-Parser zusammenarbeiten. Nehmen
   Sie deshalb die folgenden Aenderungen an Ihrem SPL-Scanner vor:
   a) Loeschen Sie die Dateien 'sym.java' und 'Symbol.java'. Die
      darin stehenden Informationen werden nun vom Parsergenerator
      Cup erzeugt bzw. bereitgestellt.
   b) Ergaenzen Sie 'scanner.jflex' um die Import-Anweisung
          import java_cup.runtime.*;
      Damit steht die Cup-Laufzeitunterstuetzung zur Verfuegung.
   c) Ersetzen Sie in 'scanner.jflex' die Zeilen
          %type Symbol
          %function next_token
          %eofval{
            return symbol(sym.EOF);
          %eofval}
          %eofclose
      durch die Zeile
          %cup
      Damit wird der Scannergenerator angewiesen, das von Cup
      verlangte Interface zu implementieren (das ist im wesentlichen
      dasselbe, was vorher dort in einzelnen Direktiven stand).

2. Schreiben Sie die Spezifikation eines Parsers fuer SPL.
   Ergaenzen Sie dazu die Datei 'parser.cup'. Eliminieren Sie
   ALLE reduce/reduce-Konflikte, falls Sie welche bekommen.
   Es darf maximal EIN shift/reduce-Konflikt uebrig bleiben.
   Welcher? Wie wird der aufgeloest? Warum ist das richtig?
   Hinweis: Sie benoetigen eine Beschreibung des Parser-Automaten.

3. Testen Sie Ihren Parser sowohl mit den im vorigen Aufgabenblatt
   geschriebenen 5 Testprogrammen als auch mit einer Reihe von ganz
   kleinen Tests, die jeweils einen bestimmten Aspekt der Grammatik
   testen, den aber moeglichst vollstaendig. Fuehren Sie diesen
   Schritt mit der gebotenen Sorgfalt aus; die Akzeptanztests zur
   Benotung Ihrer Hausuebung gehen genauso vor!

4. Machen Sie sich damit vertraut, wie man die Testausgabe des von
   Cup erzeugten Parsers aktiviert. Verfolgen Sie an den Tests, wie
   die syntaktische Analyse vonstatten geht!
